# frozen_string_literal: true

require 'bundler/gem_tasks'
require 'fileutils'

task default: :spec

desc 'Generate Doc'
task :generate_doc do
  doc_dir = File.join('..', 'target', 'doc', 'qiniu_ng_ruby').freeze
  FileUtils.rm_r doc_dir, force: true, secure: true, verbose: true
  FileUtils.mkdir_p doc_dir, verbose: true
  sh 'bundle', 'exec', 'yard', 'doc', '--fail-on-warning', '--output-dir', File.expand_path(doc_dir, __dir__),
                                      '-m', 'markdown', '-r', 'USAGE.md',
                                      '--exclude', "^#{Regexp.escape('lib/qiniu_ng/bindings.rb')}$"
end

desc 'Generate FFI Bindings'
task :generate_bindings do
  Dir.chdir File.expand_path(File.join('..', 'qiniu-c-translator'), __dir__) do
    sh 'cargo', 'run', '--',
       '--header-file', File.expand_path(File.join('..', 'qiniu-c', 'libqiniu_ng.h'), __dir__),
       'generate-ruby-bindings',
       '--output', File.expand_path(File.join('lib', 'qiniu_ng', 'bindings.rb'), __dir__)
  end
end

desc 'Prepare for build'
task :before_build do
  ext_dir = File.expand_path(File.join('ext', 'qiniu_ng'), __dir__).freeze
  FileUtils.rm_r ext_dir, force: true, secure: true, verbose: true
  FileUtils.mkdir_p ext_dir, verbose: true
  FileUtils.cp_r File.expand_path(File.join('..', 'qiniu-c'), __dir__), File.join(ext_dir, 'qiniu-c'), verbose: true
  FileUtils.rm_r File.join(ext_dir, 'qiniu-c', 'test'), force: true, secure: true, verbose: true
  FileUtils.cp_r File.expand_path(File.join('..', 'qiniu-rust'), __dir__), File.join(ext_dir, 'qiniu-rust'), verbose: true
  FileUtils.cp_r File.expand_path(File.join('..', 'qiniu-rust-http'), __dir__), File.join(ext_dir, 'qiniu-rust-http'), verbose: true
  FileUtils.cp_r File.expand_path(File.join('..', 'qiniu-rust-with-libcurl'), __dir__), File.join(ext_dir, 'qiniu-rust-with-libcurl'), verbose: true
  File.write File.join(ext_dir, 'extconf.rb'), <<~EXTCONF
    # frozen_string_literal: true

    require 'mkmf'
    require 'ffi'
    require 'fileutils'

    create_makefile 'qiniu_ng'
    File.write('Makefile', <<~MAKEFILE, mode: 'a')
      all:\\n\\tmake -C qiniu-c cargo_build_release && cp qiniu-c/target/release/\#{FFI::Platform::LIBPREFIX}qiniu_ng_c.\#{FFI::Platform::LIBSUFFIX} ..
      clean:\\n\\tcd qiniu-c && cargo clean
      install:
    MAKEFILE
  EXTCONF
end

desc 'Clearn for build'
task :after_build do
  ext_dir = File.expand_path('ext', __dir__).freeze
  FileUtils.rm_r ext_dir, force: true, secure: true, verbose: true
end
